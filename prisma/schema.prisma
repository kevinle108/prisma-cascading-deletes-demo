generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AlmostTheLastPost {
  id                Int                @id @default(autoincrement())
  title             String?
  authorId          Int?
  AlmostTheLastUser AlmostTheLastUser? @relation(fields: [authorId], references: [id], onUpdate: NoAction, map: "author")
}

model AlmostTheLastUser {
  id                Int                 @id @default(autoincrement())
  name              String?
  AlmostTheLastPost AlmostTheLastPost[]
}

model AnotherPost {
  id          Int          @id @default(autoincrement())
  title       String?
  authorId    Int?
  AnotherUser AnotherUser? @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "author")
}

model AnotherUser {
  id          Int           @id @default(autoincrement())
  name        String?
  AnotherPost AnotherPost[]
}

model OneMorePost {
  id          Int          @id @default(autoincrement())
  title       String?
  authorId    Int?
  OneMoreUser OneMoreUser? @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "author")
}

model OneMoreUser {
  id          Int           @id @default(autoincrement())
  name        String?
  OneMorePost OneMorePost[]
}

model Post {
  id       Int     @id @default(autoincrement())
  title    String?
  authorId Int?
  User     User?   @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "author")
}

model TheLastPost {
  id          Int          @id @default(autoincrement())
  title       String?
  authorId    Int?         @default(42)
  TheLastUser TheLastUser? @relation(fields: [authorId], references: [id], onDelete: SetDefault, onUpdate: NoAction, map: "author")
}

model TheLastUser {
  id          Int           @id @default(autoincrement())
  name        String?
  TheLastPost TheLastPost[]
}

model User {
  id   Int     @id @default(autoincrement())
  name String?
  Post Post[]
}
